<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	
<!-- 	
	log 사용 이유 : 디버깅, 상황 체크
	
	log4j(프레임워크) : spring에서 로그를 남기는 기능
		spring은 기본적으로 로그에 대한 라이브러리를 가지고 있음
	
	slf4j(인터페이스)
	
	appender : 출력할 로그 내용의 형식을 정하는 태그(출력할 곳, 출력형태)
		ConsoleAppender(콘솔 입출력), FileAppender(파일 입출력), RolingAppender(백업)
		
	layout : HTMLLayout, XMLLayout, PatternLayout, SimpleLayout
	
	- PatternLayout -
	* %c : 카테고리명(logger이름)을 표시
	* 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
	* %C : 클래스명을 표시함.   
	   * 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
	* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
	   * %d{HH:mm:ss, SSS}
	   * %d{yyyy MMM dd HH:mm:ss, SSS}
	   * %d{ABSOLUTE} 
	   * %d{DATE} 
	   * %d{ISO8601}
	* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
	* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
	* %L : 라인 번호만 출력한다(링크없음)
	* %m : 로그로 전달된 메시지를 출력한다.
	* %M : 로그를 수행한 메소드명을 출력한다. 
	* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
	* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
	* %r : 로그 처리시간 (milliseconds)
	* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
	* %% : % 표시를 출력. escaping
	* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
	* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태.
	=======================================================================================
	
	logger : 출력내용을 appender 전달
		name(속성) : logger를 남기는 패키지
		additivity(속성) : 로그를 상위로 전달할지(true/false) 설정 안하면 true 
		appender-ref(태그) : 활용 appender 지정
		level(태그) : 로그레벨 로그를 출력하는 범위 설정
			* debug < info < warn < error < fatal
 -->
 
	<!-- Appenders -->
	<!-- appender : 어디, 구조(어떻게 출력할지) / 출력할 곳의 설정 / 로그에 대한 환경 설정-->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] %-5p %l - %m%n" />
			<!-- 
				p : level
				m : 메세지
				l : 링크
			-->
		</layout>
		
		 
		<!-- <layout class="org.apache.log4j.HTMLLayout"></layout> -->
		<!-- <layout class="org.apache.log4j.SimpleLayout"></layout> -->
		<!-- <layout class="org.apache.log4j.xml.XMLLayout"></layout> -->
	
	</appender>
	<!-- log를 기록하는 위치를 file로 하려면 appender를 추가하면 된다 -->
	<appender name="fileLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="Append" value="true"/>
		<param name="file" value="${catalina.base}${file.separator}log${file.separator}spring${file.separator}spring.log"/>
		<!-- value값을 수정하면 원하는 위치에 log file을 저장할 수 있다 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] %-5p %l - %m%n" />
		</layout>
	</appender>
	
	<!-- DB로그를 출력하기 위한 구문 -->
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p : %m%n"/>
		</layout>
	</appender>
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info"/>
		<appender-ref ref="sqlLogger"/>
	</logger>
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info"/>
		<appender-ref ref="sqlLogger"/>
	</logger>
	
	
	<!-- Application Loggers -->
	<logger name="com.kh.spring">
		<level value="warn" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="fileLogger"/>
	</root>
	<!-- 이클립스로 실행되었기에 이클립스 임시폴더에 file이 저장이 된다 -->
	<!-- 프로젝트경로\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\log\spring -->
	
</log4j:configuration>
